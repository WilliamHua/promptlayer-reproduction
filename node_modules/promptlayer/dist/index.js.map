{"version":3,"sources":["../src/index.ts","../src/groups.ts","../src/utils.ts","../src/promptlayer.ts","../src/prompts.ts","../src/templates.ts","../src/track.ts"],"sourcesContent":["import * as groups from \"@/groups\";\nimport { promptLayerBase } from \"@/promptlayer\";\nimport * as prompts from \"@/prompts\";\nimport * as templates from \"@/templates\";\nimport * as track from \"@/track\";\nimport * as utils from \"@/utils\";\n\nexport const promptlayer = new Proxy<{\n  OpenAI: any;\n  Anthropic: any;\n  api_key: string | undefined;\n  utils: typeof utils;\n  track: typeof track;\n  groups: typeof groups;\n  prompts: typeof prompts;\n  templates: typeof templates;\n}>(\n  {\n    OpenAI: {},\n    Anthropic: {},\n    api_key: process.env.PROMPTLAYER_API_KEY,\n    utils,\n    track,\n    groups,\n    prompts,\n    templates,\n  },\n  {\n    get: (target, prop, receiver) => {\n      if ([\"OpenAI\", \"Anthropic\"].includes(prop.toString())) {\n        const moduleName = prop === \"OpenAI\" ? \"openai\" : \"@anthropic-ai/sdk\";\n        const module = require(moduleName).default;\n        return promptLayerBase(\n          module,\n          prop.toString().toLowerCase(),\n          prop.toString().toLowerCase()\n        );\n      }\n      return Reflect.get(target, prop, receiver);\n    },\n  }\n);\n","import { promptLayerCreateGroup } from \"@/utils\";\n\nconst create = async (): Promise<number | boolean> =>\n  await promptLayerCreateGroup();\n\nexport { create };\n","import { promptlayer } from \"@/index\";\nimport {\n  GetPromptTemplate,\n  GetPromptTemplateParams,\n  LegacyPublishPromptTemplate,\n  Pagination,\n  PublishPromptTemplate,\n  PublishPromptTemplateResponse,\n  TrackGroup,\n  TrackMetadata,\n  TrackPrompt,\n  TrackRequest,\n  TrackScore,\n} from \"@/types\";\nimport { ChatCompletion, ChatCompletionChunk } from \"openai/resources\";\n\nconst URL_API_PROMPTLAYER = \"https://api.promptlayer.com\";\n\nconst getApiKey = () => {\n  if (promptlayer.api_key === undefined) {\n    throw new Error(\n      \"Please set your PROMPTLAYER_API_KEY environment variable or set API KEY in code using 'promptlayer.api_key = <your_api_key>' \"\n    );\n  } else {\n    return promptlayer.api_key;\n  }\n};\n\nconst promptlayerApiHandler = async <Item>(\n  body: TrackRequest & {\n    request_response: AsyncIterable<Item> | any;\n  }\n) => {\n  const isGenerator = body.request_response[Symbol.asyncIterator] !== undefined;\n  if (isGenerator) {\n    return proxyGenerator(body.request_response, body);\n  }\n  return await promptLayerApiRequest(body);\n};\n\nconst promptLayerApiRequest = async (body: TrackRequest) => {\n  try {\n    const response = await fetch(`${URL_API_PROMPTLAYER}/track-request`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      warnOnBadResponse(\n        data,\n        \"WARNING: While logging your request, PromptLayer experienced the following error:\"\n      );\n    }\n    if (data && body.return_pl_id) {\n      return [body.request_response, data.request_id];\n    }\n  } catch (e) {\n    console.warn(\n      `WARNING: While logging your request PromptLayer had the following error: ${e}`\n    );\n  }\n  return body.request_response;\n};\n\nconst promptLayerAllPromptTemplates = async (params?: Pagination) => {\n  const url = new URL(`${URL_API_PROMPTLAYER}/rest/prompts`);\n  Object.entries(params || {}).forEach(([key, value]) =>\n    url.searchParams.append(key, value)\n  );\n  try {\n    const response = await fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-API-KEY\": getApiKey(),\n      },\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      console.warn(\n        `WARNING: While fetching all prompt templates, PromptLayer had the following error: ${JSON.stringify(\n          data\n        )}`\n      );\n    }\n    return data;\n  } catch (e) {\n    console.warn(\n      `WARNING: While fetching all prompt templates, PromptLayer had the following error: ${e}`\n    );\n  }\n};\n\n/**\n * Get a prompt from the PromptLayer library\n * @param prompt_name name of the prompt to get\n * @param api_key your api key\n * @param version version of the prompt to get, None for latest\n * @param label The release label of a prompt you want to get. Setting this will supercede version\n */\nconst promptLayerGetPrompt = async (body: GetPromptTemplate) => {\n  const params: Record<string, string> = {\n    prompt_name: body.prompt_name,\n    version: body.version?.toString() ?? \"\",\n    label: body.label ?? \"\",\n  };\n  const url = new URL(`${URL_API_PROMPTLAYER}/library-get-prompt-template`);\n  url.search = new URLSearchParams(params).toString();\n  let response: Response;\n  try {\n    response = await fetch(url.toString(), {\n      method: \"GET\",\n      headers: {\n        \"X-API-KEY\": getApiKey(),\n      },\n    });\n  } catch (e) {\n    throw new Error(\n      `PromptLayer had the following error while getting your prompt: ${e}`\n    );\n  }\n  const data = await response.json();\n  if (response.status !== 200) {\n    throwOnBadResponse(\n      data,\n      `PromptLayer had the following error while retrieving your prompt template`\n    );\n  }\n  return data;\n};\n\nconst promptLayerPublishPrompt = async (\n  body: LegacyPublishPromptTemplate\n): Promise<boolean> => {\n  let response: Response;\n  try {\n    response = await fetch(\n      `${URL_API_PROMPTLAYER}/library-publish-prompt-template`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...body,\n          api_key: getApiKey(),\n        }),\n      }\n    );\n  } catch (e) {\n    throw new Error(\n      `PromptLayer had the following error while publishing your prompt template: ${e}`\n    );\n  }\n  const data = await response.json();\n  if (response.status !== 200) {\n    throwOnBadResponse(\n      data,\n      `PromptLayer had the following error while publishing your prompt`\n    );\n  }\n  return true;\n};\n\nconst promptLayerTrackMetadata = async (\n  body: TrackMetadata\n): Promise<boolean> => {\n  try {\n    const response = await fetch(\n      `${URL_API_PROMPTLAYER}/library-track-metadata`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...body,\n          api_key: getApiKey(),\n        }),\n      }\n    );\n    const data = await response.json();\n    if (response.status !== 200) {\n      warnOnBadResponse(\n        data,\n        \"WARNING: While logging metadata to your request, PromptLayer experienced the following error\"\n      );\n      return false;\n    }\n  } catch (e) {\n    console.warn(\n      `WARNING: While logging metadata to your request, PromptLayer experienced the following error: ${e}`\n    );\n    return false;\n  }\n  return true;\n};\n\nconst promptLayerTrackScore = async (body: TrackScore): Promise<boolean> => {\n  try {\n    const response = await fetch(`${URL_API_PROMPTLAYER}/library-track-score`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        ...body,\n        api_key: getApiKey(),\n      }),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      warnOnBadResponse(\n        data,\n        \"WARNING: While scoring your request, PromptLayer experienced the following error\"\n      );\n      return false;\n    }\n  } catch (e) {\n    console.warn(\n      `WARNING: While scoring your request, PromptLayer experienced the following error: ${e}`\n    );\n    return false;\n  }\n  return true;\n};\n\nconst promptLayerTrackPrompt = async (body: TrackPrompt): Promise<boolean> => {\n  try {\n    const response = await fetch(\n      `${URL_API_PROMPTLAYER}/library-track-prompt`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...body,\n          api_key: getApiKey(),\n        }),\n      }\n    );\n    const data = await response.json();\n    if (response.status !== 200) {\n      warnOnBadResponse(\n        data,\n        \"WARNING: While associating your request with a prompt template, PromptLayer experienced the following error\"\n      );\n      return false;\n    }\n  } catch (e) {\n    console.warn(\n      `WARNING: While associating your request with a prompt template, PromptLayer experienced the following error: ${e}`\n    );\n    return false;\n  }\n  return true;\n};\n\nconst promptLayerTrackGroup = async (body: TrackGroup): Promise<boolean> => {\n  try {\n    const response = await fetch(`${URL_API_PROMPTLAYER}/track-group`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        ...body,\n        api_key: getApiKey(),\n      }),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      warnOnBadResponse(\n        data,\n        \"WARNING: While associating your request with a group, PromptLayer experienced the following error\"\n      );\n      return false;\n    }\n  } catch (e) {\n    console.warn(\n      `WARNING: While associating your request with a group, PromptLayer experienced the following error: ${e}`\n    );\n    return false;\n  }\n  return true;\n};\n\nconst promptLayerCreateGroup = async (): Promise<number | boolean> => {\n  try {\n    const response = await fetch(`${URL_API_PROMPTLAYER}/create-group`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        api_key: getApiKey(),\n      }),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      warnOnBadResponse(\n        data,\n        \"WARNING: While creating a group PromptLayer had the following error\"\n      );\n      return false;\n    }\n    return data.id;\n  } catch (e) {\n    console.warn(\n      `WARNING: While creating a group PromptLayer had the following error: ${e}`\n    );\n    return false;\n  }\n};\n\nconst getPromptTemplate = async (\n  promptName: string,\n  params?: Partial<GetPromptTemplateParams>\n) => {\n  try {\n    const url = new URL(\n      `${URL_API_PROMPTLAYER}/prompt-templates/${promptName}`\n    );\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-API-KEY\": getApiKey(),\n      },\n      body: JSON.stringify({ ...params, api_key: getApiKey() }),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      warnOnBadResponse(\n        data,\n        \"WARNING: While fetching a prompt template PromptLayer had the following error\"\n      );\n      return null;\n    }\n    return data;\n  } catch (e) {\n    console.warn(\n      `WARNING: While fetching a prompt template PromptLayer had the following error: ${e}`\n    );\n    return null;\n  }\n};\n\nconst publishPromptTemplate = async (body: PublishPromptTemplate) => {\n  try {\n    const response = await fetch(\n      `${URL_API_PROMPTLAYER}/rest/prompt-templates`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"X-API-KEY\": getApiKey(),\n        },\n        body: JSON.stringify({\n          prompt_template: { ...body },\n          prompt_version: { ...body },\n        }),\n      }\n    );\n    const data = await response.json();\n    if (response.status === 400) {\n      warnOnBadResponse(\n        data,\n        \"WARNING: While publishing a prompt template PromptLayer had the following error\"\n      );\n    }\n    return data as Promise<PublishPromptTemplateResponse>;\n  } catch (e) {\n    console.warn(\n      `WARNING: While publishing a prompt template PromptLayer had the following error: ${e}`\n    );\n  }\n};\n\nconst mapChatCompletionChunk = (\n  results: ChatCompletionChunk[]\n): ChatCompletion => {\n  let content: ChatCompletion.Choice[\"message\"][\"content\"] = null;\n  let functionCall: ChatCompletion.Choice[\"message\"][\"function_call\"] =\n    undefined;\n  const response: ChatCompletion = {\n    id: \"\",\n    choices: [],\n    created: Date.now(),\n    model: \"\",\n    object: \"chat.completion\",\n  };\n  const lastResult = results.at(-1);\n  if (!lastResult) return response;\n  let toolCalls: ChatCompletion.Choice[\"message\"][\"tool_calls\"] = undefined;\n  for (const result of results) {\n    const delta = result.choices[0].delta;\n\n    if (delta.content) {\n      content = `${content || \"\"}${delta.content || \"\"}`;\n    }\n    if (delta.function_call) {\n      functionCall = {\n        name: `${functionCall ? functionCall.name : \"\"}${\n          delta.function_call.name || \"\"\n        }`,\n        arguments: `${functionCall ? functionCall.arguments : \"\"}${\n          delta.function_call.arguments || \"\"\n        }`,\n      };\n    }\n    const toolCall = delta.tool_calls?.[0];\n    if (toolCall) {\n      toolCalls = toolCalls || [];\n      const lastToolCall = toolCalls.at(-1);\n      if (!lastToolCall || toolCall.id) {\n        toolCalls.push({\n          id: toolCall.id || \"\",\n          type: toolCall.type || \"function\",\n          function: {\n            name: toolCall.function?.name || \"\",\n            arguments: toolCall.function?.arguments || \"\",\n          },\n        });\n        continue;\n      }\n      lastToolCall.function.name = `${lastToolCall.function.name}${\n        toolCall.function?.name || \"\"\n      }`;\n      lastToolCall.function.arguments = `${lastToolCall.function.arguments}${\n        toolCall.function?.arguments || \"\"\n      }`;\n    }\n  }\n  response.choices.push({\n    finish_reason: lastResult.choices[0].finish_reason || \"stop\",\n    index: lastResult.choices[0].index || 0,\n    logprobs: lastResult.choices[0].logprobs || null,\n    message: {\n      role: \"assistant\",\n      content,\n      function_call: functionCall ? functionCall : undefined,\n      tool_calls: toolCalls ? toolCalls : undefined,\n    },\n  });\n  response.id = lastResult.id;\n  response.model = lastResult.model;\n  response.created = lastResult.created;\n  response.system_fingerprint = lastResult.system_fingerprint;\n  return response;\n};\n\nconst cleaned_result = (results: any[]) => {\n  if (\"completion\" in results[0]) {\n    return results.reduce(\n      (prev, current) => ({\n        ...current,\n        completion: `${prev.completion}${current.completion}`,\n      }),\n      {}\n    );\n  }\n\n  if (\"text\" in results[0].choices[0]) {\n    let response = \"\";\n    for (const result of results) {\n      response = `${response}${result.choices[0].text}`;\n    }\n    const final_result = structuredClone(results.at(-1));\n    final_result.choices[0].text = response;\n    return final_result;\n  }\n\n  if (\"delta\" in results[0].choices[0]) {\n    const response = mapChatCompletionChunk(results);\n    response.choices[0] = {\n      ...response.choices[0],\n      ...response.choices[0].message,\n    };\n    return response;\n  }\n\n  return \"\";\n};\n\nasync function* proxyGenerator<Item>(\n  generator: AsyncIterable<Item>,\n  body: TrackRequest\n) {\n  const results = [];\n  for await (const value of generator) {\n    yield value;\n    results.push(value);\n  }\n  const request_response = cleaned_result(results);\n  const response = await promptLayerApiRequest({\n    ...body,\n    request_response,\n    request_end_time: new Date().toISOString(),\n  });\n  yield response;\n}\n\nconst warnOnBadResponse = (request_response: any, main_message: string) => {\n  try {\n    console.warn(`${main_message}: ${request_response.message}`);\n  } catch (e) {\n    console.warn(`${main_message}: ${request_response}`);\n  }\n};\n\nconst throwOnBadResponse = (request_response: any, main_message: string) => {\n  if (\"message\" in request_response) {\n    throw new Error(`${main_message}: ${request_response.message}`);\n  }\n  throw new Error(`${main_message}: ${request_response.message}`);\n};\n\nexport {\n  getApiKey,\n  getPromptTemplate,\n  promptLayerAllPromptTemplates,\n  promptLayerApiRequest,\n  promptLayerCreateGroup,\n  promptLayerGetPrompt,\n  promptLayerPublishPrompt,\n  promptLayerTrackGroup,\n  promptLayerTrackMetadata,\n  promptLayerTrackPrompt,\n  promptLayerTrackScore,\n  promptlayerApiHandler,\n  publishPromptTemplate,\n};\n","import { getApiKey, promptlayerApiHandler } from \"@/utils\";\n\nexport const promptLayerBase = (\n  llm: object,\n  function_name = \"\",\n  provider = \"openai\"\n) => {\n  const handler: ProxyHandler<any> = {\n    construct: (target, args) => {\n      const newTarget = Reflect.construct(target, args);\n      Object.defineProperties(newTarget, {\n        function_name: {\n          value: function_name,\n          writable: true,\n        },\n        provider: {\n          value: provider,\n        },\n      });\n      return new Proxy(newTarget, handler);\n    },\n    get: (target, prop, receiver) => {\n      const value = target[prop];\n      const function_name = `${Reflect.get(\n        target,\n        \"function_name\"\n      )}.${prop.toString()}`;\n      if (typeof value === \"object\") {\n        Object.defineProperties(value, {\n          function_name: {\n            value: function_name,\n            writable: true,\n          },\n          provider: {\n            value: provider,\n          },\n        });\n        return new Proxy(value, handler);\n      }\n      if (typeof value === \"function\") {\n        return (...args: any[]) => {\n          const request_start_time = new Date().toISOString();\n          const provider_type = Reflect.get(target, \"provider\");\n          const return_pl_id = args[0]?.return_pl_id;\n          const pl_tags = args[0]?.pl_tags;\n          delete args[0]?.return_pl_id;\n          delete args[0]?.pl_tags;\n          const response = Reflect.apply(value, target, args);\n          if (response instanceof Promise) {\n            return new Promise((resolve, reject) => {\n              response\n                .then(async (request_response) => {\n                  const response = await promptlayerApiHandler({\n                    api_key: getApiKey(),\n                    provider_type,\n                    function_name,\n                    request_start_time,\n                    request_end_time: new Date().toISOString(),\n                    request_response,\n                    kwargs: args[0],\n                    return_pl_id,\n                    tags: pl_tags,\n                  });\n                  resolve(response);\n                })\n                .catch((error) => {\n                  reject(error);\n                });\n            });\n          }\n          return response;\n        };\n      }\n      return Reflect.get(target, prop, receiver);\n    },\n  };\n  return new Proxy(llm, handler);\n};\n","import {\n  GetPromptTemplate,\n  LegacyPromptTemplate,\n  LegacyPublishPromptTemplate,\n  Pagination,\n} from \"@/types\";\nimport {\n  promptLayerAllPromptTemplates,\n  promptLayerGetPrompt,\n  promptLayerPublishPrompt,\n} from \"@/utils\";\n\n/**\n * @description List all prompts on PromptLayer.\n * @param params\n */\nexport const all = (params?: Pagination) =>\n  promptLayerAllPromptTemplates(params);\n/**\n * Get a prompt template from PromptLayer.\n */\nconst getPrompt = async (\n  params: GetPromptTemplate\n): Promise<LegacyPromptTemplate> => {\n  const prompt = await promptLayerGetPrompt(params);\n  const prompt_template = prompt[\"prompt_template\"];\n  const metadata = prompt[\"metadata\"];\n  return {\n    prompt_template,\n    metadata,\n  };\n};\n\nconst publishPrompt = (body: LegacyPublishPromptTemplate): Promise<boolean> => {\n  const { prompt_template, commit_message } = body;\n  if (commit_message && commit_message.length > 72) {\n    throw new Error(\"Commit message must be less than 72 characters.\");\n  }\n  if (!(prompt_template instanceof Object)) {\n    throw new Error(\"Please provide a JSON prompt template.\");\n  }\n  return promptLayerPublishPrompt(body);\n};\n\nexport { getPrompt as get, publishPrompt as publish };\n","import { GetPromptTemplateParams, PublishPromptTemplate } from \"@/types\";\nimport { getPromptTemplate, publishPromptTemplate } from \"@/utils\";\n\nexport const get = (\n  promptName: string,\n  params?: Partial<GetPromptTemplateParams>\n) => getPromptTemplate(promptName, params);\n\nexport const publish = (body: PublishPromptTemplate) =>\n  publishPromptTemplate(body);\n","import { TrackGroup, TrackMetadata, TrackPrompt, TrackScore } from \"@/types\";\nimport {\n  promptLayerTrackGroup,\n  promptLayerTrackMetadata,\n  promptLayerTrackPrompt,\n  promptLayerTrackScore,\n} from \"@/utils\";\n\nconst metadata = (body: TrackMetadata): Promise<boolean> => {\n  if (!(body.metadata instanceof Object)) {\n    throw new Error(\"Please provide a dictionary of metadata.\");\n  }\n  for (const [key, value] of Object.entries(body.metadata)) {\n    if (typeof key !== \"string\" || typeof value !== \"string\") {\n      throw new Error(\n        \"Please provide a dictionary of metadata with key value pair of strings.\"\n      );\n    }\n  }\n  return promptLayerTrackMetadata(body);\n};\n\nconst score = (body: TrackScore): Promise<boolean> => {\n  if (typeof body.score !== \"number\") {\n    throw new Error(\"Score must be a number\");\n  }\n  if (body.score < 0 || body.score > 100) {\n    throw new Error(\"Score must be a number between 0 and 100.\");\n  }\n  return promptLayerTrackScore(body);\n};\n\nconst prompt = (body: TrackPrompt): Promise<boolean> => {\n  if (!(body.prompt_input_variables instanceof Object)) {\n    throw new Error(\"Prompt template input variable dictionary not provided.\");\n  }\n  return promptLayerTrackPrompt(body);\n};\n\nconst group = (body: TrackGroup) => promptLayerTrackGroup(body);\n\nexport { group, metadata, prompt, score };\n"],"mappings":"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","names":["src_exports","__export","promptlayer","__toCommonJS","groups_exports","__export","create","utils_exports","__export","getApiKey","getPromptTemplate","promptLayerAllPromptTemplates","promptLayerApiRequest","promptLayerCreateGroup","promptLayerGetPrompt","promptLayerPublishPrompt","promptLayerTrackGroup","promptLayerTrackMetadata","promptLayerTrackPrompt","promptLayerTrackScore","promptlayerApiHandler","publishPromptTemplate","URL_API_PROMPTLAYER","getApiKey","promptlayer","promptlayerApiHandler","body","__async","proxyGenerator","promptLayerApiRequest","response","data","warnOnBadResponse","promptLayerAllPromptTemplates","params","url","key","value","e","promptLayerGetPrompt","_a","_b","_c","throwOnBadResponse","promptLayerPublishPrompt","__spreadProps","__spreadValues","promptLayerTrackMetadata","promptLayerTrackScore","promptLayerTrackPrompt","promptLayerTrackGroup","promptLayerCreateGroup","getPromptTemplate","promptName","publishPromptTemplate","mapChatCompletionChunk","results","_d","_e","content","functionCall","lastResult","toolCalls","result","delta","toolCall","lastToolCall","cleaned_result","prev","current","final_result","generator","__asyncGenerator","iter","__forAwait","more","temp","error","__await","request_response","main_message","create","__async","promptLayerCreateGroup","promptLayerBase","llm","function_name","provider","handler","target","args","newTarget","prop","receiver","value","_a","_b","_c","_d","request_start_time","provider_type","return_pl_id","pl_tags","response","resolve","reject","request_response","__async","promptlayerApiHandler","getApiKey","error","prompts_exports","__export","all","getPrompt","publishPrompt","all","params","promptLayerAllPromptTemplates","getPrompt","__async","prompt","promptLayerGetPrompt","prompt_template","metadata","publishPrompt","body","commit_message","promptLayerPublishPrompt","templates_exports","__export","get","publish","get","promptName","params","getPromptTemplate","publish","body","publishPromptTemplate","track_exports","__export","group","metadata","prompt","score","metadata","body","key","value","promptLayerTrackMetadata","score","promptLayerTrackScore","prompt","promptLayerTrackPrompt","group","promptLayerTrackGroup","promptlayer","utils_exports","track_exports","groups_exports","prompts_exports","templates_exports","target","prop","receiver","moduleName","module","promptLayerBase"]}