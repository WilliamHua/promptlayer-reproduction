declare const create: () => Promise<number | boolean>;

declare const groups_create: typeof create;
declare namespace groups {
  export {
    groups_create as create,
  };
}

interface GetPromptTemplate {
    prompt_name: string;
    version?: number;
    label?: string;
}
interface LegacyPromptTemplate {
    prompt_template: any;
    metadata: any;
}
interface LegacyPublishPromptTemplate {
    prompt_name: string;
    prompt_template: any;
    commit_message?: string;
    tags?: string[];
    metadata?: any;
}
interface TrackRequest {
    api_key: string;
    provider_type?: string;
    function_name: string;
    args?: unknown[];
    kwargs?: Record<string, unknown>;
    request_end_time: string;
    request_start_time: string;
    prompt_id?: number;
    prompt_version?: number;
    metadata?: Record<string, string>;
    tags?: string[];
    request_response?: Record<string, unknown>;
    prompt_input_variables?: Record<string, string> | string[];
    [k: string]: unknown;
}
interface TrackMetadata {
    request_id: number;
    metadata: Record<string, string>;
}
interface TrackScore {
    request_id: number;
    score: number;
}
interface TrackPrompt {
    request_id: number;
    prompt_name: string;
    prompt_input_variables: Record<string, unknown>;
    version?: number;
    label?: string;
}
interface TrackGroup {
    request_id: number;
    group_id: number;
}
interface Pagination {
    page?: number;
    per_page?: number;
}
interface GetPromptTemplateParams {
    version?: number;
    label?: string;
    provider: string;
    input_variables: Record<string, string>;
}
declare const templateFormat: readonly ["f-string", "jinja2"];
type TemplateFormat = (typeof templateFormat)[number];
type ImageUrl = {
    url: string;
};
type TextContent = {
    type: "text";
    text: string;
};
type ImageContent = {
    type: "image_url";
    image_url: ImageUrl;
};
type Content = TextContent | ImageContent;
type Function_ = {
    name: string;
    description: string;
    parameters: Record<string, unknown>;
};
type Tool = {
    type: "function";
    function: Function_;
};
type FunctionCall = {
    name: string;
    arguments: string;
};
type SystemMessage = {
    role: "system";
    input_variables?: string[];
    template_format?: TemplateFormat;
    content: Content[];
    name?: string;
};
type UserMessage = {
    role: "user";
    input_variables?: string[];
    template_format?: TemplateFormat;
    content: Content[];
    name?: string;
};
type ToolCall = {
    id: string;
    type: "function";
    function: FunctionCall;
};
type AssistantMessage = {
    role: "assistant";
    input_variables?: string[];
    template_format?: TemplateFormat;
    content?: Content[];
    function_call?: FunctionCall;
    name?: string;
    tool_calls?: ToolCall[];
};
type FunctionMessage = {
    role: "function";
    input_variables?: string[];
    template_format?: TemplateFormat;
    content?: Content[];
    name: string;
};
type ToolMessage = {
    role: "tool";
    input_variables?: string[];
    template_format?: TemplateFormat;
    content: Content[];
    tool_call_id: string;
    name?: string;
};
type Message = SystemMessage | UserMessage | AssistantMessage | FunctionMessage | ToolMessage;
type ChatFunctionCall = {
    name: string;
};
type CompletionPromptTemplate = {
    type: "completion";
    template_format?: TemplateFormat;
    content: Content[];
    input_variables?: string[];
};
type ChatToolChoice = {
    type: "function";
    function: ChatFunctionCall;
};
type ToolChoice = string | ChatToolChoice;
type ChatPromptTemplate = {
    type: "chat";
    messages: Message[];
    functions?: Function_[];
    function_call?: "auto" | "none" | ChatFunctionCall;
    input_variables?: string[];
    tools?: Tool[];
    tool_choice?: ToolChoice;
};
type PromptTemplate = CompletionPromptTemplate | ChatPromptTemplate;
type Model = {
    provider: string;
    name: string;
    parameters: Record<string, unknown>;
};
type Metadata = {
    model?: Model;
};
type BasePromptTemplate = {
    prompt_name: string;
    tags?: string[];
};
type PromptVersion = {
    prompt_template: PromptTemplate;
    commit_message?: string;
    metadata?: Metadata;
};
type PublishPromptTemplate = BasePromptTemplate & PromptVersion;
type PublishPromptTemplateResponse = {
    id: number;
    prompt_name: string;
    tags: string[];
    prompt_template: PromptTemplate;
    commit_message?: string;
    metadata?: Metadata;
};

/**
 * @description List all prompts on PromptLayer.
 * @param params
 */
declare const all: (params?: Pagination) => Promise<any>;
/**
 * Get a prompt template from PromptLayer.
 */
declare const getPrompt: (params: GetPromptTemplate) => Promise<LegacyPromptTemplate>;
declare const publishPrompt: (body: LegacyPublishPromptTemplate) => Promise<boolean>;

declare const prompts_all: typeof all;
declare namespace prompts {
  export {
    prompts_all as all,
    getPrompt as get,
    publishPrompt as publish,
  };
}

declare const get: (promptName: string, params?: Partial<GetPromptTemplateParams>) => Promise<any>;
declare const publish: (body: PublishPromptTemplate) => Promise<PublishPromptTemplateResponse | undefined>;

declare const templates_get: typeof get;
declare const templates_publish: typeof publish;
declare namespace templates {
  export {
    templates_get as get,
    templates_publish as publish,
  };
}

declare const metadata: (body: TrackMetadata) => Promise<boolean>;
declare const score: (body: TrackScore) => Promise<boolean>;
declare const prompt: (body: TrackPrompt) => Promise<boolean>;
declare const group: (body: TrackGroup) => Promise<boolean>;

declare const track_group: typeof group;
declare const track_metadata: typeof metadata;
declare const track_prompt: typeof prompt;
declare const track_score: typeof score;
declare namespace track {
  export {
    track_group as group,
    track_metadata as metadata,
    track_prompt as prompt,
    track_score as score,
  };
}

declare const getApiKey: () => string;
declare const promptlayerApiHandler: <Item>(body: TrackRequest & {
    request_response: any;
}) => Promise<any[] | Record<string, unknown> | AsyncGenerator<unknown, void, unknown> | undefined>;
declare const promptLayerApiRequest: (body: TrackRequest) => Promise<any[] | Record<string, unknown> | undefined>;
declare const promptLayerAllPromptTemplates: (params?: Pagination) => Promise<any>;
/**
 * Get a prompt from the PromptLayer library
 * @param prompt_name name of the prompt to get
 * @param api_key your api key
 * @param version version of the prompt to get, None for latest
 * @param label The release label of a prompt you want to get. Setting this will supercede version
 */
declare const promptLayerGetPrompt: (body: GetPromptTemplate) => Promise<any>;
declare const promptLayerPublishPrompt: (body: LegacyPublishPromptTemplate) => Promise<boolean>;
declare const promptLayerTrackMetadata: (body: TrackMetadata) => Promise<boolean>;
declare const promptLayerTrackScore: (body: TrackScore) => Promise<boolean>;
declare const promptLayerTrackPrompt: (body: TrackPrompt) => Promise<boolean>;
declare const promptLayerTrackGroup: (body: TrackGroup) => Promise<boolean>;
declare const promptLayerCreateGroup: () => Promise<number | boolean>;
declare const getPromptTemplate: (promptName: string, params?: Partial<GetPromptTemplateParams>) => Promise<any>;
declare const publishPromptTemplate: (body: PublishPromptTemplate) => Promise<PublishPromptTemplateResponse | undefined>;

declare const utils_getApiKey: typeof getApiKey;
declare const utils_getPromptTemplate: typeof getPromptTemplate;
declare const utils_promptLayerAllPromptTemplates: typeof promptLayerAllPromptTemplates;
declare const utils_promptLayerApiRequest: typeof promptLayerApiRequest;
declare const utils_promptLayerCreateGroup: typeof promptLayerCreateGroup;
declare const utils_promptLayerGetPrompt: typeof promptLayerGetPrompt;
declare const utils_promptLayerPublishPrompt: typeof promptLayerPublishPrompt;
declare const utils_promptLayerTrackGroup: typeof promptLayerTrackGroup;
declare const utils_promptLayerTrackMetadata: typeof promptLayerTrackMetadata;
declare const utils_promptLayerTrackPrompt: typeof promptLayerTrackPrompt;
declare const utils_promptLayerTrackScore: typeof promptLayerTrackScore;
declare const utils_promptlayerApiHandler: typeof promptlayerApiHandler;
declare const utils_publishPromptTemplate: typeof publishPromptTemplate;
declare namespace utils {
  export {
    utils_getApiKey as getApiKey,
    utils_getPromptTemplate as getPromptTemplate,
    utils_promptLayerAllPromptTemplates as promptLayerAllPromptTemplates,
    utils_promptLayerApiRequest as promptLayerApiRequest,
    utils_promptLayerCreateGroup as promptLayerCreateGroup,
    utils_promptLayerGetPrompt as promptLayerGetPrompt,
    utils_promptLayerPublishPrompt as promptLayerPublishPrompt,
    utils_promptLayerTrackGroup as promptLayerTrackGroup,
    utils_promptLayerTrackMetadata as promptLayerTrackMetadata,
    utils_promptLayerTrackPrompt as promptLayerTrackPrompt,
    utils_promptLayerTrackScore as promptLayerTrackScore,
    utils_promptlayerApiHandler as promptlayerApiHandler,
    utils_publishPromptTemplate as publishPromptTemplate,
  };
}

declare const promptlayer: {
    OpenAI: any;
    Anthropic: any;
    api_key: string | undefined;
    utils: typeof utils;
    track: typeof track;
    groups: typeof groups;
    prompts: typeof prompts;
    templates: typeof templates;
};

export { promptlayer };
